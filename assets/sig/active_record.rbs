class ActiveRecord::Base
  def self.scope: (Symbol, ^(*untyped) -> untyped ) -> void
                | (Symbol) { (*untyped) -> untyped } -> void
  def self.belongs_to: (Symbol, ?untyped, **untyped) -> void
  def self.has_many: (Symbol, ?untyped, **untyped) -> void
  def self.has_one: (Symbol, ?untyped, **untyped) -> void
  def self.transaction: [T] () { () -> T } -> T
  def self.create!: (**untyped) -> instance
  def self.validate: (*untyped) -> void
  def self.validates: (*untyped) -> void

  # callbacks
  def self.after_commit: (*untyped) -> void
  def self.after_create: (*untyped) -> void
  def self.after_destroy: (*untyped) -> void
  def self.after_rollback: (*untyped) -> void
  def self.after_save: (*untyped) -> void
  def self.after_update: (*untyped) -> void
  def self.after_validation: (*untyped) -> void
  def self.around_create: (*untyped) -> void
  def self.around_destroy: (*untyped) -> void
  def self.around_save: (*untyped) -> void
  def self.around_update: (*untyped) -> void
  def self.before_create: (*untyped) -> void
  def self.before_destroy: (*untyped) -> void
  def self.before_save: (*untyped) -> void
  def self.before_update: (*untyped) -> void
  def self.before_validation: (*untyped) -> void

  def will_save_change_to_attribute?: (String | Symbol attr_name, from: untyped, to: untyped) -> bool

  def valid?: () -> bool
  def errors: () -> untyped
end

class ActiveRecord::Relation
end

class ActiveRecord::Associations::CollectionProxy
end

interface _ActiveRecord_Relation[Model]
  def all: () -> self
  def none: () -> self
  def pluck: (Symbol | String column) -> Array[untyped]
           | (*Symbol | String columns) -> Array[Array[untyped]]
  def where: (*untyped) -> self
  def not: (*untyped) -> self
  def exists: (*untyped) -> bool
  def order: (*untyped) -> self
  def find_by: (*untyped) -> Model?
  def find_by!: (*untyped) -> Model
  def find: (Integer id) -> Model
  def first: () -> Model
           | (Integer count) -> Array[Model]
  def each: () { (Model) -> void } -> self
end

interface _ActiveRecord_Relation_ClassMethods[Model, Relation]
  def all: () -> Relation
  def none: () -> Relation
  def pluck: (Symbol | String column) -> Array[untyped]
           | (*Symbol | String columns) -> Array[Array[untyped]]
  def where: (*untyped) -> Relation
  def exists: (*untyped) -> bool
  def order: (*untyped) -> Relation
  def find_by: (*untyped) -> Model?
  def find_by!: (*untyped) -> Model
  def find: (Integer id) -> Model
  def first: () -> Model
           | (Integer count) -> Array[Model]
end
